#!/usr/sbin/nft -f

flush ruleset

table ip filter_ipv4 {
	
	set crowdsec-blacklists {
		type ipv4_addr
		flags timeout
	}

	chain input_v4 {
		type filter hook input priority filter; policy accept;
		# loopback accept
		iif "lo" accept

		#already established connection accept
		ct state established,related accept
		
		#localconnections TCP
		ip saddr { {{ white_list_local_ips }} } tcp dport { 22, 25, 80, 123, 143, 443, 587, 993, 995, 2049, 3306, 4190, 10050, 10051 } ct state new log prefix "local connection:" accept
		
		#localconnections udp
		ip saddr { {{ white_list_local_ips }} } udp dport { 53 } ct state new log prefix "local connection:" accept
		
		#scnanners drops
		tcp flags != syn ct state new log prefix "FIRST_PACKETS_IS_NOT_SYN" drop
		tcp flags & (fin | syn) == fin | syn log prefix "SCANNER1" drop
		tcp flags & (syn | rst) == syn | rst log prefix "SCANNER2" drop
		tcp flags & (fin | syn | rst | psh | ack | urg) < fin log prefix "SCANNER3" drop
		tcp flags & (fin | syn | rst | psh | ack | urg) == fin | psh | urg log prefix "SCANNER4" drop
		ct state invalid log prefix "Invalid conntrack state: " flags all counter packets 0 bytes 0 drop
		tcp dport { 80, 123, 443 } ct state new log prefix "outside connections:" accept
	
		#remote_connection TCP whitelist:
		ip saddr { {{ white_list_public_ips }} } tcp dport { 80, 123, 443 } ct state new log prefix "outside connections whitelist:" accept
		
        #remote_connection UDP whitelist:
		ip saddr { {{ white_list_public_ips }} } udp dport { 53 } ct state new log prefix "outside connections:" accept
		
        #drop evrything from blacklists!
		ip saddr @crowdsec-blacklists drop
		
		#other from blacklists accept to http!
		tcp dport { 80, 443 } ct state new log prefix "outside connections:" accept
		
		#drop rest
		drop

}
}

table ip6 filter_ipv6 {

	set crowdsec6-blacklists {
		type ipv6_addr
		flags timeout
	}

	chain crowdsec6-chain {
		type filter hook input priority filter; policy accept;
		ip6 saddr @crowdsec6-blacklists drop
	}

	chain input_v6 {
		type filter hook input priority filter; policy drop;
		ct state invalid counter packets 0 bytes 0 drop comment "early drop of invalid packets"
		ct state { established, related } counter packets 0 bytes 0 accept comment "accept all connections related to connections made by us"
		iif "lo" accept comment "accept loopback"
		iif != "lo" ip6 daddr ::1 counter packets 0 bytes 0 drop comment "drop connections to loopback not coming from loopback"
		ip6 nexthdr ipv6-icmp counter packets 0 bytes 0 accept comment "accept all ICMP types"
		tcp dport 22 counter packets 0 bytes 0 accept comment "accept SSH"
		counter packets 0 bytes 0 comment "count dropped packets"
	}

	chain forward6 {
		type filter hook forward priority filter; policy drop;
		counter packets 0 bytes 0 comment "count dropped packets"
	}

	chain output6 {
		type filter hook output priority filter; policy accept;
		counter packets 0 bytes 0 comment "count accepted packets"
	}
}
